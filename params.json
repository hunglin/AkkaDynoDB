{"name":"Akkadynodb","tagline":"Dynamo like distributed database built using Akka Cluster","body":"AkkaDynoDB (Reactive Storage Service)\r\n==========================================================\r\n\r\nDynamo like distributed database built using Akka Cluster\r\n\r\n## **Introduction**\r\n\r\n_**AkkaDynoDB**_ is a _reactive_ _storage_ _service_ inspired from the Amazon dynamo distributed database\r\nwhich is Highly available, scalable and resilient database [All Things distributed Paper](http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf).\r\nWith changing requirements of enterprise applications the way we build applications has been changing. With increasing number of\r\ndevices that connect to the internet the traffic per server has drastically changed over years and its going to increase much more in the\r\nnear future with the emergence of Internet of things(IOT). In order to cater to the changing requirements which cannot be handled by traditional architectures\r\nmany enterprises started adopting distributed architectures to spread load over large number of machines and handle user requests. These applications should also\r\nhandle data effectively and offer reliability to its users. As the number of users increasing the applications must also scalable well \r\naccording to the need. Not only scalability and reliability users also expect 100% availability that means 0 down times even in case of \r\ndatabase maintenance and data migration. In order to offer these essential features enterprises have been adopting certain best practices and techniques from \r\ndifferent researches. _**Reactive design principles**_ basically convey these best practices and how systems should be built from ground up to be scalable,\r\navailable and be resilient.\r\n\r\n## **Reactive Systems**\r\n \r\n_**Reactive Systems**_ has these four traits\r\n\r\n1. Responsive     (Available in a responding state)\r\n\r\n2. Resilient      (Fault tolerant)\r\n\r\n3. Elastic        (Scalable)\r\n\r\n4. Message Driven (Communicate by sending messages i.e core to distribution)\r\n\r\nPlease read [Reactive Manifesto](http://www.reactivemanifesto.org/) to know about what is to be reactive.\r\n\r\n## **Akka**\r\n\r\n_**Akka**_ as mentioned here [akka.io](http://akka.io) is a toolkit and runtime for building \r\n\r\n1. Highly Concurrent\r\n\r\n2. Distributed\r\n\r\n3. Resilient\r\n\r\n4. Message-Driven  applications on JVM (Java Virtual Machine)\r\n\r\nAkka adheres to the reactive principles and offers abstractions to deal with concurrency, distribution and fault tolerance.\r\n\r\n1. For concurrency Akka offers Scala Futures and Agents.     (Helps Scale up)\r\n\r\n2. For Distribution and Remoting it offers Actors.           (Helps Scale Out)\r\n\r\n3. For Fault tolerance Actor Supervision.                    (Deal with Failure)\r\n\r\nNote: The above mentioned is not exhaustive list of what akka offers. Please visit [Akka Website](http://akka.io) for more.\r\n\r\nMore about actors [Actor Model](http://arxiv.org/pdf/1008.1459.pdf), [Actor Model](http://publications.csail.mit.edu/lcs/pubs/pdf/MIT-LCS-TR-194.pdf).\r\n\r\n## **Actor**\r\n\r\n_**Actor Model**_ of concurrent computation provides a primitive called as **Actor**. \r\n\r\nActor is an entity which can do these three things\r\n\r\n1. Communicate with message passing (can communicate)\r\n\r\n2. Create new actors (Can create new actors)\r\n\r\n3. decide what to do with next message (Can change its behaviour on receiving a message)\r\n\r\nActors can also have mutable state and can take local decisions. Actors can be used for distributing work among different machines.\r\nWith the help of actors work can be distributed among other worker actors and performed in a concurrent and distributed manner.\r\nActors provide location transparency by which same semantics of communication that are used for local actors can be used with remote actors.\r\nRunning potential long running code inside the actor makes the actor deaf to the messages that are sent to it. So, it is recommend to\r\nwrap long running code inside a Future and execute it.Akka provides handy syntax to do the same.\r\n\r\n\r\n  ```scala\r\n  \r\n  object MasterActor {\r\n      case object StartWork\r\n  }\r\n\r\n  class MasterActor extends Actor with ActorLogging {\r\n      def receive = {\r\n          case StartWork => {\r\n              val future = Future {\r\n                 longRunningCode\r\n             }\r\n             future pipeTo self //pipe feature\r\n          }\r\n          case _ => log.info(\"unknown message\")\r\n      }\r\n      def longRunningCode: Unit = Thread.sleep(1000000)\r\n  }\r\n  \r\n  ```\r\n  \r\n## **Akka Cluster** \r\n\r\nAkka Cluster \r\n\r\n\r\nAkka Cluster provides a fault tolerant decentralized peer-to-peer based cluster membership service with no \r\nsingle point of failure or single point of bottleneck. It does this using gossip protocols and a automatic failure\r\ndetector [Akka Cluster Specification Into](http://doc.akka.io/docs/akka/snapshot/common/cluster.html#cluster)\r\n\r\nPlease have a look at Akka Cluster documentation here [Akka Cluster](http://akka.io/docs)\r\n\r\n\r\n## **AkkaDynoDB Architecture**\r\n\r\nTo do\r\n\r\n![To do](https://raw.githubusercontent.com/pamu/AkkaDynoDB/master/images/todo.png)\r\n\r\nOverall AkkaDynoDB looks like this\r\n\r\n![AkkaDynoDB](https://raw.githubusercontent.com/pamu/AkkaDynoDB/master/images/cluster.png)\r\n\r\nEach Node in the cluster sends heart beats to every other node in the cluster to know whether a particluar\r\nnode is dead or alive.AkkaDynoDb uses Akka Cluster so, all that applies to Akka Cluster also applies to\r\nAkkaDynoDB\r\n\r\n\r\nInteractions of single Node of Cluster\r\n\r\n![AkkaDynoDB Node](https://raw.githubusercontent.com/pamu/AkkaDynoDB/master/images/node.png)\r\n\r\nThe above picture depicts the interactions of the single node with other nodes. All nodes are in consistent hashing ring\r\n\r\nNode in detail\r\n\r\n![AkkaDynoDB Node](https://raw.githubusercontent.com/pamu/AkkaDynoDB/master/images/node_detail.png)\r\n\r\nEach node in the cluster consists of these three components\r\n\r\n 1. Service Actor\r\n 2. ConsistentHashing Router in the Service Actor\r\n 3. Storage Actor which persists the data into store\r\n\r\n## **Service Actor**\r\n\r\n_**Service Actor**_ receives all the client requests to persist and retrieve the data. Then the request is\r\nsent to the Consistent Hashing router. The request consists of the Key which helps the Router to dispatch\r\nthe request to the final node in which the data is stored. If the key belongs to the Node itself\r\nthen the request is sent to the Storage Actor itself and will not be routed.\r\n\r\n\r\n## **Consistent Hashing Router**\r\n\r\nThis is inside the _**Service Actor**_ . The responsibility of the router is to take the request and dispatch\r\nit to the corresponding node which is responsible for handling the data. This is done by using the key in the request.\r\nAlso Consistent Hashing Router helps in both read and write request scalability there by preventing hot stops in the system.\r\n\r\n\r\n\r\n## **Storage Actor**\r\n\r\n_**Storage Actor**_ is responsible for persisting the data and retrieving the data that is requested by the\r\nService Actor and this request is dispatched by the consistent hashing router in the service node.\r\n\r\nConsistent Hashing Router\r\n\r\n![AkkaDynoDB Node](https://raw.githubusercontent.com/pamu/AkkaDynoDB/master/images/ring.png)\r\n\r\n\r\n\r\n ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}